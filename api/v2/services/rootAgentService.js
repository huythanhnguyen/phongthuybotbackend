const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

// C·∫•u h√¨nh k·∫øt n·ªëi ƒë·∫øn Python ADK
const PYTHON_ADK_URL = process.env.PYTHON_ADK_URL || 'http://localhost:10000';
const API_KEY = process.env.ADK_API_KEY || 'dev_key';

// L∆∞u tr·ªØ session
const sessions = {};

/**
 * Service qu·∫£n l√Ω Root Agent v√† ƒëi·ªÅu ph·ªëi t·ªõi c√°c agents kh√°c
 */
class RootAgentService {
  /**
   * Kh·ªüi t·∫°o d·ªãch v·ª• Root Agent
   */
  constructor() {
    console.log('ü§ñ Kh·ªüi t·∫°o Root Agent Service');
    this.apiClient = axios.create({
      baseURL: PYTHON_ADK_URL,
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
      }
    });
  }

  /**
   * X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
   * @param {Object} params - Tham s·ªë x·ª≠ l√Ω
   * @param {string} params.message - N·ªôi dung tin nh·∫Øn
   * @param {string} [params.sessionId] - ID phi√™n l√†m vi·ªác
   * @param {string} [params.userId] - ID ng∆∞·ªùi d√πng
   * @param {Object} [params.metadata] - Metadata b·ªï sung
   * @returns {Promise<Object>} K·∫øt qu·∫£ x·ª≠ l√Ω
   */
  async processMessage({ message, sessionId, userId, metadata = {} }) {
    try {
      // T·∫°o ID phi√™n n·∫øu ch∆∞a c√≥
      if (!sessionId) {
        sessionId = uuidv4();
        console.log(`üÜï T·∫°o phi√™n m·ªõi: ${sessionId}`);
      }

      // L∆∞u th√¥ng tin phi√™n n·∫øu ch∆∞a c√≥
      if (!sessions[sessionId]) {
        sessions[sessionId] = {
          id: sessionId,
          userId,
          startTime: new Date(),
          history: [],
          metadata: { ...metadata }
        };
      }

      // C·∫≠p nh·∫≠t l·ªãch s·ª≠ tin nh·∫Øn
      sessions[sessionId].history.push({
        role: 'user',
        content: message,
        timestamp: new Date().toISOString()
      });

      // Chu·∫©n b·ªã request
      const requestBody = {
        message,
        session_id: sessionId,
        user_id: userId,
        metadata
      };

      // G·ª≠i request ƒë·∫øn Python ADK
      console.log(`üì§ G·ª≠i y√™u c·∫ßu ƒë·∫øn ADK: ${message.substring(0, 50)}...`);
      
      try {
        // Th·ª≠ g·ªçi API v·ªõi timeout v√† retry
        const response = await this.apiClient.post('/chat', requestBody, {
          timeout: 30000, // TƒÉng timeout l√™n 30 gi√¢y
        });

        // Ki·ªÉm tra k·∫øt qu·∫£
        if (!response.data) {
          throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ ADK');
        }

        // L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠
        const responseContent = response.data.response || response.data.text || 'Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ h·ªá th·ªëng';
        sessions[sessionId].history.push({
          role: 'assistant',
          content: responseContent,
          timestamp: new Date().toISOString(),
          agentType: response.data.agent_type || 'unknown'
        });

        return {
          sessionId,
          response: responseContent,
          agentType: response.data.agent_type || 'unknown',
          success: response.data.success !== false
        };
      } catch (apiError) {
        console.error('‚ùå L·ªói khi g·ªçi API ADK:', apiError.message);
        
        // Th·ª≠ g·ªçi endpoint d·ª± ph√≤ng /agent/stream
        if (apiError.code === 'ECONNREFUSED' || apiError.code === 'ENOTFOUND' || 
            apiError.response?.status === 500) {
          console.log('‚ö†Ô∏è Th·ª≠ k·∫øt n·ªëi ƒë·∫øn endpoint kh√°c: /agent/stream');
          
          try {
            const fallbackResponse = await this.apiClient.post('/agent/stream', {
              text: message,
              sessionId: sessionId,
              userId: userId,
              metadata
            });
            
            if (fallbackResponse.data && (fallbackResponse.data.text || fallbackResponse.data.response)) {
              const responseText = fallbackResponse.data.text || fallbackResponse.data.response;
              
              // L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠
              sessions[sessionId].history.push({
                role: 'assistant',
                content: responseText,
                timestamp: new Date().toISOString(),
                agentType: 'root' // M·∫∑c ƒë·ªãnh l√† root agent
              });
              
              return {
                sessionId,
                response: responseText,
                agentType: 'root',
                success: true
              };
            }
          } catch (fallbackError) {
            console.error('‚ùå L·ªói khi th·ª≠ k·∫øt n·ªëi d·ª± ph√≤ng:', fallbackError.message);
          }
        }
        
        // N·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i, d√πng ph∆∞∆°ng √°n d·ª± ph√≤ng local
        console.log('‚ö†Ô∏è ADK kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng ph∆∞∆°ng √°n d·ª± ph√≤ng local');
        return this._fallbackProcessing(message, sessionId);
      }
    } catch (error) {
      console.error('‚ùå L·ªói nghi√™m tr·ªçng khi x·ª≠ l√Ω tin nh·∫Øn:', error);
      return {
        sessionId,
        response: "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.",
        agentType: "error",
        success: false,
        error: error.message
      };
    }
  }

  /**
   * X·ª≠ l√Ω tin nh·∫Øn d·∫°ng stream
   * @param {Object} params - Tham s·ªë x·ª≠ l√Ω
   * @param {string} params.message - N·ªôi dung tin nh·∫Øn
   * @param {string} [params.sessionId] - ID phi√™n l√†m vi·ªác
   * @param {string} [params.userId] - ID ng∆∞·ªùi d√πng
   * @param {Object} [params.metadata] - Metadata b·ªï sung
   * @param {Function} params.onChunk - Callback khi nh·∫≠n ƒë∆∞·ª£c chunk d·ªØ li·ªáu
   * @param {Function} params.onComplete - Callback khi ho√†n th√†nh
   * @param {Function} params.onError - Callback khi c√≥ l·ªói
   */
  async processMessageStream({ message, sessionId, userId, metadata = {}, onChunk, onComplete, onError }) {
    try {
      // T·∫°o ID phi√™n n·∫øu ch∆∞a c√≥
      if (!sessionId) {
        sessionId = uuidv4();
        console.log(`üÜï T·∫°o phi√™n m·ªõi: ${sessionId}`);
      }

      // L∆∞u th√¥ng tin phi√™n n·∫øu ch∆∞a c√≥
      if (!sessions[sessionId]) {
        sessions[sessionId] = {
          id: sessionId,
          userId,
          startTime: new Date(),
          history: [],
          metadata: { ...metadata }
        };
      }

      // C·∫≠p nh·∫≠t l·ªãch s·ª≠ tin nh·∫Øn
      sessions[sessionId].history.push({
        role: 'user',
        content: message,
        timestamp: new Date().toISOString()
      });

      console.log(`üì§ G·ª≠i y√™u c·∫ßu stream ƒë·∫øn ADK: ${message.substring(0, 50)}...`);
      
      let useNonStreamingFallback = false;
      let streamError = null;
      
      // Th·ª≠ c√°c ph∆∞∆°ng th·ª©c kh√°c nhau ƒë·ªÉ l·∫•y ph·∫£n h·ªìi
      try {
        // Chu·∫©n b·ªã request c√≥ stream
        const requestBody = {
          message,
          session_id: sessionId,
          user_id: userId,
          metadata,
          stream: true
        };
        
        // G·ª≠i request ƒë·∫øn Python ADK v·ªõi stream
        const response = await this.apiClient.post('/chat/stream', requestBody, {
          responseType: 'stream',
          timeout: 30000 // TƒÉng timeout l√™n 30 gi√¢y
        });

        // X·ª≠ l√Ω response d·∫°ng stream
        let fullContent = '';
        
        response.data.on('data', (chunk) => {
          const content = chunk.toString('utf8');
          
          // Ph√¢n t√≠ch d·ªØ li·ªáu theo ƒë·ªãnh d·∫°ng SSE
          const lines = content.split('\n\n');
          
          for (const line of lines) {
            if (line.startsWith('data: ')) {
              try {
                const data = JSON.parse(line.substring(6));
                
                if (data.type === 'chunk') {
                  fullContent += data.content;
                  onChunk(data);
                } else if (data.type === 'error') {
                  streamError = new Error(data.error || 'Unknown streaming error');
                  console.error('Stream error:', data.error);
                }
              } catch (e) {
                console.error('L·ªói khi x·ª≠ l√Ω chunk:', e);
              }
            }
          }
        });
        
        response.data.on('end', () => {
          // Ki·ªÉm tra n·∫øu c√≥ l·ªói ho·∫∑c kh√¥ng c√≥ n·ªôi dung
          if (streamError || !fullContent) {
            useNonStreamingFallback = true;
            return;
          }
          
          // L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠
          sessions[sessionId].history.push({
            role: 'assistant',
            content: fullContent,
            timestamp: new Date().toISOString()
          });
          
          onComplete();
        });
        
        response.data.on('error', (err) => {
          console.error('L·ªói stream:', err);
          streamError = err;
          useNonStreamingFallback = true;
        });
        
        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ xem c√≥ l·ªói kh√¥ng
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        // N·∫øu c·∫ßn d√πng fallback, th√¨ break ra
        if (useNonStreamingFallback) {
          throw new Error('Stream kh√¥ng th√†nh c√¥ng, chuy·ªÉn sang ph∆∞∆°ng √°n d·ª± ph√≤ng');
        }
        
      } catch (streamErr) {
        console.error('‚ùå L·ªói khi x·ª≠ l√Ω stream, th·ª≠ ph∆∞∆°ng √°n kh√¥ng stream:', streamErr.message);
        
        try {
          // Th·ª≠ ph∆∞∆°ng √°n kh√¥ng stream - g·ªçi ƒë·∫øn /agent/stream b√¨nh th∆∞·ªùng
          const fallbackResponse = await this.apiClient.post('/agent/stream', {
            text: message,
            sessionId,
            userId,
          }, { timeout: 30000 });
          
          if (fallbackResponse.data && fallbackResponse.data.text) {
            const responseText = fallbackResponse.data.text;
            
            // Gi·∫£ l·∫≠p stream b·∫±ng c√°ch chia nh·ªè ph·∫£n h·ªìi
            const chunks = this._splitTextIntoChunks(responseText);
            
            for (const chunk of chunks) {
              onChunk({
                type: 'chunk',
                content: chunk
              });
              
              // T·∫°m d·ª´ng m·ªôt ch√∫t ƒë·ªÉ gi·∫£ l·∫≠p stream
              await new Promise(resolve => setTimeout(resolve, 50));
            }
            
            // L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠
            sessions[sessionId].history.push({
              role: 'assistant',
              content: responseText,
              timestamp: new Date().toISOString()
            });
            
            onComplete();
            return;
          } else {
            throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ fallback endpoint');
          }
        } catch (fallbackErr) {
          console.error('‚ùå L·ªói khi g·ªçi fallback endpoint:', fallbackErr.message);
          
          // Cu·ªëi c√πng th·ª≠ ph∆∞∆°ng √°n d·ª± ph√≤ng local
          try {
            const result = await this._fallbackProcessing(message, sessionId);
            
            // Gi·∫£ l·∫≠p stream b·∫±ng c√°ch chia nh·ªè ph·∫£n h·ªìi
            const chunks = this._splitTextIntoChunks(result.response);
            
            for (const chunk of chunks) {
              onChunk({
                type: 'chunk',
                content: chunk
              });
              
              // T·∫°m d·ª´ng m·ªôt ch√∫t ƒë·ªÉ gi·∫£ l·∫≠p stream
              await new Promise(resolve => setTimeout(resolve, 50));
            }
            
            onComplete();
            return;
          } catch (localErr) {
            onError(new Error('T·∫•t c·∫£ c√°c ph∆∞∆°ng √°n ƒë·ªÅu th·∫•t b·∫°i: ' + localErr.message));
          }
        }
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi x·ª≠ l√Ω tin nh·∫Øn stream:', error);
      onError(error);
    }
  }

  /**
   * G·ª≠i truy v·∫•n tr·ª±c ti·∫øp ƒë·∫øn m·ªôt agent c·ª• th·ªÉ
   * @param {Object} params - Tham s·ªë truy v·∫•n
   * @param {string} params.agentType - Lo·∫°i agent
   * @param {string} params.query - N·ªôi dung truy v·∫•n
   * @param {string} [params.sessionId] - ID phi√™n l√†m vi·ªác
   * @param {string} [params.userId] - ID ng∆∞·ªùi d√πng
   * @param {Object} [params.metadata] - Metadata b·ªï sung
   * @returns {Promise<Object>} K·∫øt qu·∫£ truy v·∫•n
   */
  async queryAgent({ agentType, query, sessionId, userId, metadata = {} }) {
    try {
      // T·∫°o ID phi√™n n·∫øu ch∆∞a c√≥
      if (!sessionId) {
        sessionId = uuidv4();
        console.log(`üÜï T·∫°o phi√™n m·ªõi cho truy v·∫•n tr·ª±c ti·∫øp: ${sessionId}`);
      }

      // Chu·∫©n b·ªã request
      const requestBody = {
        query,
        agent_type: agentType,
        session_id: sessionId,
        user_id: userId,
        metadata
      };

      // G·ª≠i request ƒë·∫øn Python ADK
      console.log(`üì§ G·ª≠i truy v·∫•n tr·ª±c ti·∫øp ƒë·∫øn agent ${agentType}: ${query.substring(0, 50)}...`);
      const response = await this.apiClient.post('/query', requestBody);

      // Ki·ªÉm tra k·∫øt qu·∫£
      if (!response.data || response.status !== 200) {
        throw new Error(`Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ agent ${agentType}`);
      }

      return {
        sessionId,
        response: response.data.response,
        agentType,
        success: response.data.success || true,
        data: response.data.data || {}
      };
    } catch (error) {
      console.error(`‚ùå L·ªói khi truy v·∫•n agent ${agentType}:`, error);
      
      // N·∫øu API ch∆∞a ch·∫°y, s·ª≠ d·ª•ng ph∆∞∆°ng √°n d·ª± ph√≤ng
      if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
        console.log('‚ö†Ô∏è ADK kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng ph∆∞∆°ng √°n d·ª± ph√≤ng cho truy v·∫•n tr·ª±c ti·∫øp');
        
        if (agentType === 'batcuclinh_so') {
          return {
            sessionId,
            response: `ƒê√¢y l√† ph·∫£n h·ªìi d·ª± ph√≤ng cho truy v·∫•n "${query}" ƒë·∫øn agent B√°t C·ª•c Linh S·ªë. Python ADK ch∆∞a s·∫µn s√†ng.`,
            agentType,
            success: true
          };
        }
        
        return {
          sessionId,
          response: `Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn agent ${agentType}. Python ADK ch∆∞a s·∫µn s√†ng.`,
          agentType,
          success: false
        };
      }
      
      throw error;
    }
  }

  /**
   * X·ª≠ l√Ω d·ª± ph√≤ng khi kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Python ADK
   * @private
   * @param {string} message - N·ªôi dung tin nh·∫Øn
   * @param {string} sessionId - ID phi√™n l√†m vi·ªác
   * @returns {Object} K·∫øt qu·∫£ x·ª≠ l√Ω d·ª± ph√≤ng
   */
  _fallbackProcessing(message, sessionId) {
    console.log('üîÑ S·ª≠ d·ª•ng x·ª≠ l√Ω d·ª± ph√≤ng cho tin nh·∫Øn:', message.substring(0, 50));
    
    let response = '';
    let agentType = 'unknown';
    
    // Ki·ªÉm tra c√°c t·ª´ kh√≥a ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i tin nh·∫Øn
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('s·ªë ƒëi·ªán tho·∫°i') || 
        lowerMessage.includes('sƒët') || 
        lowerMessage.match(/\d{10,11}/)) {
      // Ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i
      response = 'Ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán khi Python ADK s·∫µn s√†ng. Hi·ªán t·∫°i d·ªãch v·ª• n√†y ƒëang ƒë∆∞·ª£c kh·ªüi ƒë·ªông.';
      agentType = 'batcuclinh_so';
    } else if (lowerMessage.includes('cccd') || 
              lowerMessage.includes('cƒÉn c∆∞·ªõc') || 
              lowerMessage.includes('cmnd') || 
              lowerMessage.match(/\d{9,12}/)) {
      // Ph√¢n t√≠ch CCCD
      response = 'Ph√¢n t√≠ch CCCD/CMND s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán khi Python ADK s·∫µn s√†ng. Hi·ªán t·∫°i d·ªãch v·ª• n√†y ƒëang ƒë∆∞·ª£c kh·ªüi ƒë·ªông.';
      agentType = 'batcuclinh_so';
    } else {
      // M·∫∑c ƒë·ªãnh
      response = 'Xin ch√†o! T√¥i l√† Phong Th·ªßy S·ªë Bot. Hi·ªán t·∫°i d·ªãch v·ª• ph√¢n t√≠ch ƒëang ƒë∆∞·ª£c kh·ªüi ƒë·ªông. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t, ho·∫∑c ki·ªÉm tra xem Python ADK ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông ch∆∞a.';
    }
    
    // L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠ n·∫øu c√≥ session
    if (sessions[sessionId]) {
      sessions[sessionId].history.push({
        role: 'assistant',
        content: response,
        timestamp: new Date().toISOString(),
        agentType
      });
    }
    
    return {
      sessionId,
      response,
      agentType,
      success: true
    };
  }

  /**
   * Chia vƒÉn b·∫£n th√†nh c√°c chunks nh·ªè h∆°n ƒë·ªÉ gi·∫£ l·∫≠p stream
   * @private
   * @param {string} text - VƒÉn b·∫£n c·∫ßn chia
   * @param {number} [chunkSize=4] - K√≠ch th∆∞·ªõc m·ªói chunk (s·ªë t·ª´)
   * @returns {string[]} M·∫£ng c√°c chunk
   */
  _splitTextIntoChunks(text, chunkSize = 4) {
    const words = text.split(' ');
    const chunks = [];
    
    for (let i = 0; i < words.length; i += chunkSize) {
      chunks.push(words.slice(i, i + chunkSize).join(' '));
    }
    
    return chunks;
  }
}

module.exports = new RootAgentService(); 