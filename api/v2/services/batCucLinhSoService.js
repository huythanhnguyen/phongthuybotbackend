const axios = require('axios');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

// C·∫•u h√¨nh k·∫øt n·ªëi ƒë·∫øn Python ADK
const PYTHON_ADK_URL = process.env.PYTHON_ADK_URL || 'http://localhost:8000';
const API_KEY = process.env.ADK_API_KEY || 'dev_key';

/**
 * Service ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i, CCCD theo ph∆∞∆°ng ph√°p B√°t C·ª•c Linh S·ªë
 */
class BatCucLinhSoService {
  /**
   * Kh·ªüi t·∫°o d·ªãch v·ª•
   */
  constructor() {
    console.log('üî¢ Kh·ªüi t·∫°o B√°t C·ª•c Linh S·ªë Service');
    this.apiClient = axios.create({
      baseURL: `${PYTHON_ADK_URL}/api`,
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
      }
    });
  }

  /**
   * Ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i
   * @param {string} phoneNumber - S·ªë ƒëi·ªán tho·∫°i c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async analyzePhoneNumber(phoneNumber) {
    try {
      console.log(`üìû Ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i: ${phoneNumber}`);

      // Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i (b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát)
      const normalizedPhone = phoneNumber.replace(/[^0-9+]/g, '');
      
      try {
        // G·ªçi API t·ª´ Python ADK
        const response = await this.apiClient.post('/batcuclinh_so/phone', {
          phone_number: normalizedPhone
        });
        
        if (response.data && response.status === 200) {
          console.log('‚úÖ Ph√¢n t√≠ch th√†nh c√¥ng t·ª´ Python ADK');
          return response.data;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK:', error.message);
        console.log('üîÑ S·ª≠ d·ª•ng ph√¢n t√≠ch d·ª± ph√≤ng');
        // Ti·∫øp t·ª•c v·ªõi ph√¢n t√≠ch d·ª± ph√≤ng
      }
      
      // Ph√¢n t√≠ch d·ª± ph√≤ng n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK
      return this._fallbackPhoneAnalysis(normalizedPhone);
    } catch (error) {
      console.error('‚ùå L·ªói khi ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i:', error);
      throw new Error(`L·ªói ph√¢n t√≠ch: ${error.message}`);
    }
  }

  /**
   * Ph√¢n t√≠ch CCCD/CMND
   * @param {string} cccdNumber - S·ªë CCCD/CMND c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async analyzeCCCD(cccdNumber) {
    try {
      console.log(`ü™™ Ph√¢n t√≠ch CCCD/CMND: ${cccdNumber}`);

      // Chu·∫©n h√≥a s·ªë CCCD (b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát)
      const normalizedCCCD = cccdNumber.replace(/[^0-9]/g, '');
      
      try {
        // G·ªçi API t·ª´ Python ADK
        const response = await this.apiClient.post('/batcuclinh_so/cccd', {
          cccd_number: normalizedCCCD
        });
        
        if (response.data && response.status === 200) {
          console.log('‚úÖ Ph√¢n t√≠ch CCCD th√†nh c√¥ng t·ª´ Python ADK');
          return response.data;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK:', error.message);
        console.log('üîÑ S·ª≠ d·ª•ng ph√¢n t√≠ch CCCD d·ª± ph√≤ng');
        // Ti·∫øp t·ª•c v·ªõi ph√¢n t√≠ch d·ª± ph√≤ng
      }
      
      // Ph√¢n t√≠ch d·ª± ph√≤ng n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK
      return this._fallbackCCCDAnalysis(normalizedCCCD);
    } catch (error) {
      console.error('‚ùå L·ªói khi ph√¢n t√≠ch CCCD/CMND:', error);
      throw new Error(`L·ªói ph√¢n t√≠ch: ${error.message}`);
    }
  }

  /**
   * Ph√¢n t√≠ch th√¥ng tin chung
   * @param {string} data - D·ªØ li·ªáu c·∫ßn ph√¢n t√≠ch
   * @param {string} type - Lo·∫°i ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async analyze(data, type) {
    switch (type) {
      case 'phone':
        return await this.analyzePhoneNumber(data);
      case 'cccd':
        return await this.analyzeCCCD(data);
      case 'password':
        return await this.analyzePassword(data);
      case 'bank_account':
        return await this.analyzeBankAccount(data);
      default:
        throw new Error(`Lo·∫°i ph√¢n t√≠ch kh√¥ng h·ªó tr·ª£: ${type}`);
    }
  }

  /**
   * Ph√¢n t√≠ch d·ª± ph√≤ng cho s·ªë ƒëi·ªán tho·∫°i
   * @private
   * @param {string} phoneNumber - S·ªë ƒëi·ªán tho·∫°i c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch d·ª± ph√≤ng
   */
  _fallbackPhoneAnalysis(phoneNumber) {
    // T√≠nh t·ªïng c√°c ch·ªØ s·ªë
    const sum = [...phoneNumber].reduce((total, digit) => {
      return total + (isNaN(parseInt(digit)) ? 0 : parseInt(digit));
    }, 0);
    
    // R√∫t g·ªçn th√†nh s·ªë c√≥ 1 ch·ªØ s·ªë
    let reducedSum = sum;
    while (reducedSum > 9) {
      reducedSum = [...reducedSum.toString()].reduce((total, digit) => {
        return total + parseInt(digit);
      }, 0);
    }
    
    // X√°c ƒë·ªãnh ng≈© h√†nh
    const element = this._getElement(reducedSum);
    
    // Ph√¢n t√≠ch c∆° b·∫£n
    const analysis = `
    Ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i: ${phoneNumber}
    
    T·ªïng gi√° tr·ªã: ${sum} (R√∫t g·ªçn: ${reducedSum})
    Ng≈© h√†nh: ${element}
    
    ƒê√¢y l√† k·∫øt qu·∫£ ph√¢n t√≠ch d·ª± ph√≤ng khi kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK.
    Vui l√≤ng th·ª≠ l·∫°i sau khi h·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông ƒë·∫ßy ƒë·ªß.
    `;
    
    return {
      success: true,
      phoneNumber,
      totalValue: reducedSum,
      element,
      analysis
    };
  }
  
  /**
   * Ph√¢n t√≠ch d·ª± ph√≤ng cho CCCD/CMND
   * @private
   * @param {string} cccdNumber - S·ªë CCCD/CMND c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch d·ª± ph√≤ng
   */
  _fallbackCCCDAnalysis(cccdNumber) {
    // L·∫•y 6 s·ªë cu·ªëi c·ªßa CCCD ƒë·ªÉ ph√¢n t√≠ch phong th·ªßy
    const lastSix = cccdNumber.slice(-6);
    
    // Chu·∫©n h√≥a chu·ªói s·ªë (x·ª≠ l√Ω s·ªë 0 v√† 5)
    const normalized = this._normalizeCccdSequence(lastSix);
    
    // T√°ch th√†nh c√°c c·∫∑p s·ªë ch·ªìng l·∫•p
    const pairs = this._splitIntoOverlappingPairs(normalized);
    
    // C·∫•u tr√∫c d·ªØ li·ªáu ph√¢n t√≠ch
    const analysisData = {
      pairsAnalysis: [],       // Ph√¢n t√≠ch t·ª´ng c·∫∑p s·ªë
      combinationsAnalysis: [], // Ph√¢n t√≠ch t·ªï h·ª£p c√°c sao li·ªÅn k·ªÅ
      summary: ''              // T√≥m t·∫Øt t·ªïng quan
    };
    
    // Ki·ªÉm tra xem c√≥ th·ªÉ t·∫°o ƒë∆∞·ª£c c·∫∑p s·ªë kh√¥ng
    if (pairs.length === 0) {
      analysisData.summary = `Kh√¥ng th·ªÉ t·∫°o c·∫∑p s·ªë n√†o t·ª´ chu·ªói chu·∫©n h√≥a '${normalized}' ƒë·ªÉ ph√¢n t√≠ch.`;
      if (normalized.length < 2) {
        analysisData.summary += ` (Chu·ªói chu·∫©n h√≥a qu√° ng·∫Øn).`;
      } else {
        analysisData.summary += ` (Ki·ªÉm tra l·∫°i logic chu·∫©n h√≥a).`;
      }
    } else {
      // Ph√¢n t√≠ch t·ª´ng c·∫∑p s·ªë
      pairs.forEach((pair, index) => {
        const starInfo = this._getStarInfoForPair(pair);
        analysisData.pairsAnalysis.push({
          pairNumber: index + 1,
          digits: pair,
          starKey: starInfo.key,
          star: starInfo.name,
          meaning: starInfo.description,
          nature: starInfo.nature,
          energyLevel: starInfo.energy
        });
      });
      
      // Ph√¢n t√≠ch t·ªï h·ª£p c√°c sao li·ªÅn k·ªÅ (n·∫øu c√≥ nhi·ªÅu h∆°n 1 c·∫∑p)
      if (analysisData.pairsAnalysis.length > 1) {
        for (let i = 0; i < analysisData.pairsAnalysis.length - 1; i++) {
          const star1Info = analysisData.pairsAnalysis[i];
          const star2Info = analysisData.pairsAnalysis[i + 1];
          
          if (star1Info.starKey !== "UNKNOWN" && star2Info.starKey !== "UNKNOWN") {
            const combinationInfo = this._getStarCombinationInfo(star1Info.starKey, star2Info.starKey);
            if (combinationInfo) {
              analysisData.combinationsAnalysis.push({
                combinationNumber: i + 1,
                stars: `${star1Info.star} (${star1Info.digits}) + ${star2Info.star} (${star2Info.digits})`,
                meaning: combinationInfo.description,
                details: combinationInfo.detailedDescription
              });
            }
          }
        }
      }
      
      // T·∫°o t√≥m t·∫Øt
      const starSequence = analysisData.pairsAnalysis.map(p => p.star).join(' -> ');
      analysisData.summary = `Ph√¢n t√≠ch d·ª±a tr√™n chu·ªói s·ªë chu·∫©n h√≥a '${normalized}' (${pairs.length} c·∫∑p s·ªë, ${analysisData.combinationsAnalysis.length} k·∫øt h·ª£p). Chu·ªói sao: ${starSequence}.`;
      
      if (pairs.length < 5 && lastSix.includes('5')) {
        analysisData.summary += ` (L∆∞u √Ω: S·ªë c·∫∑p s·ªë √≠t h∆°n 5 do c√≥ s·ªë 5 trong 6 s·ªë cu·ªëi).`;
      }
    }
    
    // Tr√≠ch xu·∫•t th√¥ng tin t·ª´ c·∫•u tr√∫c CCCD (t∆∞∆°ng t·ª± ph·∫ßn c≈©)
    let info = {};
    
    if (cccdNumber.length === 12) {
      const provinceCode = cccdNumber.substring(0, 3);
      const genderCode = parseInt(cccdNumber[3]);
      const birthYear = cccdNumber.substring(4, 6);
      
      let gender = "Kh√¥ng x√°c ƒë·ªãnh";
      let century = "xx";
      
      if (genderCode === 0 || genderCode === 2 || genderCode === 4 || genderCode === 6 || genderCode === 8) {
        gender = "Nam";
      } else if (genderCode === 1 || genderCode === 3 || genderCode === 5 || genderCode === 7 || genderCode === 9) {
        gender = "N·ªØ";
      }
      
      if (genderCode === 0 || genderCode === 1) {
        century = "19";
      } else if (genderCode === 2 || genderCode === 3) {
        century = "20";
      } else if (genderCode === 4 || genderCode === 5) {
        century = "21";
      }
      
      info = {
        type: "CCCD",
        provinceCode,
        gender,
        birthYear: `${century}${birthYear}`,
        randomCode: cccdNumber.substring(6)
      };
    } else if (cccdNumber.length === 9) {
      info = {
        type: "CMND",
        note: "CMND 9 s·ªë kh√¥ng c√≥ c·∫•u tr√∫c c·ªë ƒë·ªãnh ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin chi ti·∫øt"
      };
    }
    
    return {
      success: true,
      originalNumber: cccdNumber,
      lastSixDigits: lastSix,
      normalizedSequence: normalized,
      pairs: pairs,
      analysis: {
        individualPairs: analysisData.pairsAnalysis,
        starCombinations: analysisData.combinationsAnalysis,
        overallSummary: analysisData.summary
      },
      info
    };
  }
  
  /**
   * Chu·∫©n h√≥a chu·ªói s·ªë CCCD theo quy t·∫Øc:
   * 1. S·ªë 0: Thay th·∫ø b·∫±ng s·ªë li·ªÅn tr∆∞·ªõc kh√°c 0 (ho·∫∑c s·ªë cu·ªëi c√πng c·ªßa chu·ªói g·ªëc n·∫øu kh√¥ng c√≥)
   * 2. S·ªë 5: Lo·∫°i b·ªè kh·ªèi chu·ªói
   * @param {string} digits - Chu·ªói 6 s·ªë cu·ªëi c·ªßa CCCD
   * @returns {string} Chu·ªói s·ªë ƒë√£ chu·∫©n h√≥a (c√≥ th·ªÉ ng·∫Øn h∆°n 6 s·ªë)
   */
  _normalizeCccdSequence(digits) {
    let processedDigits = digits.split('');
    const lastOriginalDigit = digits[digits.length - 1]; // L∆∞u s·ªë cu·ªëi c√πng c·ªßa chu·ªói g·ªëc
    
    // B∆∞·ªõc 1: X·ª≠ l√Ω s·ªë 0
    for (let i = 0; i < processedDigits.length; i++) {
      if (processedDigits[i] === '0') {
        let j = i - 1;
        while (j >= 0 && processedDigits[j] === '0') {
          j--;
        }
        // S·ª≠ d·ª•ng s·ªë kh√°c 0 ƒë√£ t√¨m ƒë∆∞·ª£c, ho·∫∑c s·ªë cu·ªëi c√πng n·∫øu kh√¥ng t√¨m th·∫•y
        processedDigits[i] = (j >= 0) ? processedDigits[j] : lastOriginalDigit;
      }
    }
    
    // B∆∞·ªõc 2: Lo·∫°i b·ªè s·ªë 5
    const normalized = processedDigits.filter(digit => digit !== '5').join('');
    
    return normalized;
  }
  
  /**
   * T√°ch chu·ªói s·ªë ƒë√£ chu·∫©n h√≥a th√†nh c√°c c·∫∑p s·ªë ch·ªìng l·∫•p
   * @param {string} sequence - Chu·ªói s·ªë ƒë√£ chu·∫©n h√≥a
   * @returns {string[]} M·∫£ng c√°c c·∫∑p s·ªë ch·ªìng l·∫•p
   */
  _splitIntoOverlappingPairs(sequence) {
    const pairs = [];
    if (!sequence || sequence.length < 2) {
      return pairs; // Kh√¥ng th·ªÉ t·∫°o c·∫∑p
    }
    for (let i = 0; i < sequence.length - 1; i++) {
      pairs.push(sequence.substring(i, i + 2));
    }
    return pairs;
  }
  
  /**
   * L·∫•y th√¥ng tin sao cho m·ªôt c·∫∑p s·ªë
   * @param {string} pair - C·∫∑p s·ªë c·∫ßn ph√¢n t√≠ch
   * @returns {Object} Th√¥ng tin sao t∆∞∆°ng ·ª©ng
   */
  _getStarInfoForPair(pair) {
    // Require t·∫°i ƒë√¢y ƒë·ªÉ tr√°nh circular dependency
    const BAT_TINH = require('../../../constants/batTinh');
    
    for (const starKey in BAT_TINH) {
      if (starKey.includes('_ZERO') || starKey.includes('_FIVE')) {
        continue;
      }
      const starData = BAT_TINH[starKey];
      if (starData.numbers && starData.numbers.includes(pair)) {
        return {
          key: starKey,
          name: starData.name,
          description: starData.description,
          nature: starData.nature,
          energy: starData.energy[pair] || 3 // M·∫∑c ƒë·ªãnh l√† 3 n·∫øu kh√¥ng c√≥ th√¥ng tin
        };
      }
    }
    
    return {
      key: "UNKNOWN",
      name: "Kh√¥ng x√°c ƒë·ªãnh",
      description: "Kh√¥ng c√≥ th√¥ng tin",
      nature: "Kh√¥ng x√°c ƒë·ªãnh",
      energy: 1
    };
  }
  
  /**
   * L·∫•y th√¥ng tin t·ªï h·ª£p hai sao li·ªÅn k·ªÅ
   * @param {string} starKey1 - Kh√≥a c·ªßa sao th·ª© nh·∫•t
   * @param {string} starKey2 - Kh√≥a c·ªßa sao th·ª© hai
   * @returns {Object|null} Th√¥ng tin t·ªï h·ª£p hai sao
   */
  _getStarCombinationInfo(starKey1, starKey2) {
    // Require t·∫°i ƒë√¢y ƒë·ªÉ tr√°nh circular dependency
    const COMBINATIONS = require('../../../constants/combinations');
    
    const combinationKey = `${starKey1}_${starKey2}`;
    if (COMBINATIONS.STAR_PAIRS && COMBINATIONS.STAR_PAIRS[combinationKey]) {
      const comboData = COMBINATIONS.STAR_PAIRS[combinationKey];
      return {
        combination: `${starKey1} - ${starKey2}`,
        description: comboData.description,
        detailedDescription: comboData.detailedDescription || []
      };
    }
    return null;
  }

  /**
   * X√°c ƒë·ªãnh ng≈© h√†nh t·ª´ s·ªë
   * @private
   * @param {number} number - S·ªë c·∫ßn x√°c ƒë·ªãnh ng≈© h√†nh
   * @returns {string} Ng≈© h√†nh t∆∞∆°ng ·ª©ng
   */
  _getElement(number) {
    const elements = {
      1: "Th·ªßy",
      2: "Th·ªï",
      3: "M·ªôc",
      4: "Kim",
      5: "Th·ªï",
      6: "Kim",
      7: "Kim",
      8: "Th·ªï",
      9: "H·ªèa",
      0: "Th·ªßy"
    };
    
    return elements[number] || "Kh√¥ng x√°c ƒë·ªãnh";
  }

  /**
   * Ph√¢n t√≠ch m·∫≠t kh·∫©u theo phong th·ªßy
   * @param {string} password - M·∫≠t kh·∫©u c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch m·∫≠t kh·∫©u theo phong th·ªßy
   */
  async analyzePassword(password) {
    try {
      console.log(`üîê Ph√¢n t√≠ch m·∫≠t kh·∫©u theo phong th·ªßy`);
      
      try {
        // G·ªçi API t·ª´ Python ADK
        const response = await this.apiClient.post('/batcuclinh_so/password', {
          password: password
        });
        
        if (response.data && response.status === 200) {
          console.log('‚úÖ Ph√¢n t√≠ch m·∫≠t kh·∫©u th√†nh c√¥ng t·ª´ Python ADK');
          return response.data;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK:', error.message);
        console.log('üîÑ S·ª≠ d·ª•ng ph√¢n t√≠ch m·∫≠t kh·∫©u d·ª± ph√≤ng');
        // Ti·∫øp t·ª•c v·ªõi ph√¢n t√≠ch d·ª± ph√≤ng
      }
      
      // Ph√¢n t√≠ch d·ª± ph√≤ng n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK
      return this._fallbackPasswordAnalysis(password);
    } catch (error) {
      console.error('‚ùå L·ªói khi ph√¢n t√≠ch m·∫≠t kh·∫©u:', error);
      throw new Error(`L·ªói ph√¢n t√≠ch: ${error.message}`);
    }
  }

  /**
   * Ph√¢n t√≠ch d·ª± ph√≤ng cho m·∫≠t kh·∫©u
   * @private
   * @param {string} password - M·∫≠t kh·∫©u c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch d·ª± ph√≤ng
   */
  _fallbackPasswordAnalysis(password) {
    // Tr√≠ch xu·∫•t c√°c s·ªë t·ª´ m·∫≠t kh·∫©u
    const numbers = password.replace(/[^0-9]/g, '');
    
    // N·∫øu kh√¥ng c√≥ s·ªë, tr·∫£ v·ªÅ k·∫øt qu·∫£ m·∫∑c ƒë·ªãnh
    if (!numbers || numbers.length === 0) {
      return {
        success: true,
        password: password.replace(/./g, '*'), // Che m·∫≠t kh·∫©u b·∫±ng d·∫•u *
        hasDigits: false,
        analysis: {
          summary: 'M·∫≠t kh·∫©u kh√¥ng ch·ª©a s·ªë ƒë·ªÉ ph√¢n t√≠ch theo B√°t C·ª•c Linh S·ªë.',
          recommendation: 'C√¢n nh·∫Øc th√™m c√°c s·ªë c√≥ √Ω nghƒ©a phong th·ªßy t·ªët v√†o m·∫≠t kh·∫©u.'
        },
        securityLevel: this._assessPasswordStrength(password)
      };
    }
    
    // T√¨m c√°c c·∫∑p s·ªë li·ªÅn k·ªÅ trong m·∫≠t kh·∫©u
    const pairs = this._findDigitPairsInPassword(password);
    
    // C·∫•u tr√∫c d·ªØ li·ªáu ph√¢n t√≠ch
    const analysisData = {
      digitalPresence: `M·∫≠t kh·∫©u ch·ª©a ${numbers.length} ch·ªØ s·ªë (${numbers.length / password.length * 100}%).`,
      pairsAnalysis: [],       // Ph√¢n t√≠ch t·ª´ng c·∫∑p s·ªë
      badCombinations: [],     // C√°c k·∫øt h·ª£p hung tinh
      goodCombinations: [],    // C√°c k·∫øt h·ª£p c√°t tinh
      recommendation: ''       // ƒê·ªÅ xu·∫•t c·∫£i thi·ªán
    };
    
    // Ph√¢n t√≠ch t·ª´ng c·∫∑p s·ªë
    let hasNegativeStar = false;
    
    pairs.forEach(pair => {
      const starInfo = this._getStarInfoForPair(pair.digits);
      const pairAnalysis = {
        position: `${pair.startIndex}-${pair.startIndex + 1}`,
        digits: pair.digits,
        starKey: starInfo.key,
        star: starInfo.name,
        nature: starInfo.nature
      };
      
      analysisData.pairsAnalysis.push(pairAnalysis);
      
      // Ki·ªÉm tra hung/c√°t tinh
      if (starInfo.nature === 'Hung tinh') {
        hasNegativeStar = true;
        analysisData.badCombinations.push(`${starInfo.name} (${pair.digits}) t·∫°i v·ªã tr√≠ ${pair.startIndex+1}`);
      } else if (starInfo.nature === 'C√°t tinh') {
        analysisData.goodCombinations.push(`${starInfo.name} (${pair.digits}) t·∫°i v·ªã tr√≠ ${pair.startIndex+1}`);
      }
    });
    
    // T·∫°o ƒë·ªÅ xu·∫•t c·∫£i thi·ªán
    if (hasNegativeStar) {
      analysisData.recommendation = 'N√™n thay ƒë·ªïi c√°c c·∫∑p s·ªë hung tinh b·∫±ng c√°c c·∫∑p s·ªë c√°t tinh ƒë·ªÉ c·∫£i thi·ªán nƒÉng l∆∞·ª£ng.';
    } else if (analysisData.pairsAnalysis.length === 0) {
      analysisData.recommendation = 'Th√™m c√°c c·∫∑p s·ªë c√≥ √Ω nghƒ©a t·ªët theo B√°t C·ª•c Linh S·ªë ƒë·ªÉ tƒÉng c∆∞·ªùng nƒÉng l∆∞·ª£ng.';
    } else {
      analysisData.recommendation = 'M·∫≠t kh·∫©u c√≥ nƒÉng l∆∞·ª£ng t·ªët v·ªÅ m·∫∑t s·ªë h·ªçc.';
    }
    
    // T√≥m t·∫Øt
    let summary = '';
    if (analysisData.badCombinations.length > 0) {
      summary += `Ph√°t hi·ªán ${analysisData.badCombinations.length} c·∫∑p s·ªë hung tinh. `;
    }
    if (analysisData.goodCombinations.length > 0) {
      summary += `Ph√°t hi·ªán ${analysisData.goodCombinations.length} c·∫∑p s·ªë c√°t tinh. `;
    }
    summary += analysisData.recommendation;
    
    return {
      success: true,
      password: password.replace(/./g, '*'), // Che m·∫≠t kh·∫©u b·∫±ng d·∫•u *
      hasDigits: true,
      digitCount: numbers.length,
      digitPairs: pairs.length,
      analysis: {
        details: analysisData,
        summary: summary
      },
      securityLevel: this._assessPasswordStrength(password)
    };
  }
  
  /**
   * T√¨m c√°c c·∫∑p s·ªë li·ªÅn k·ªÅ trong m·∫≠t kh·∫©u
   * @private
   * @param {string} password - M·∫≠t kh·∫©u c·∫ßn ph√¢n t√≠ch
   * @returns {Array} M·∫£ng c√°c c·∫∑p s·ªë li·ªÅn k·ªÅ v√† v·ªã tr√≠ c·ªßa ch√∫ng
   */
  _findDigitPairsInPassword(password) {
    const pairs = [];
    
    for (let i = 0; i < password.length - 1; i++) {
      const char1 = password[i];
      const char2 = password[i + 1];
      
      // Ki·ªÉm tra n·∫øu c·∫£ hai k√Ω t·ª± l√† s·ªë
      if (/^\d$/.test(char1) && /^\d$/.test(char2)) {
        pairs.push({
          startIndex: i,
          digits: char1 + char2
        });
      }
    }
    
    return pairs;
  }
  
  /**
   * ƒê√°nh gi√° ƒë·ªô m·∫°nh c·ªßa m·∫≠t kh·∫©u
   * @private
   * @param {string} password - M·∫≠t kh·∫©u c·∫ßn ƒë√°nh gi√°
   * @returns {Object} Th√¥ng tin v·ªÅ ƒë·ªô m·∫°nh c·ªßa m·∫≠t kh·∫©u
   */
  _assessPasswordStrength(password) {
    let strength = 0;
    let feedback = [];
    
    // Ki·ªÉm tra ƒë·ªô d√†i
    if (password.length < 8) {
      feedback.push('M·∫≠t kh·∫©u qu√° ng·∫Øn');
    } else if (password.length >= 12) {
      strength += 2;
    } else {
      strength += 1;
    }
    
    // Ki·ªÉm tra ch·ªØ th∆∞·ªùng
    if (/[a-z]/.test(password)) {
      strength += 1;
    } else {
      feedback.push('N√™n th√™m ch·ªØ c√°i th∆∞·ªùng');
    }
    
    // Ki·ªÉm tra ch·ªØ hoa
    if (/[A-Z]/.test(password)) {
      strength += 1;
    } else {
      feedback.push('N√™n th√™m ch·ªØ c√°i hoa');
    }
    
    // Ki·ªÉm tra s·ªë
    if (/\d/.test(password)) {
      strength += 1;
    } else {
      feedback.push('N√™n th√™m ch·ªØ s·ªë');
    }
    
    // Ki·ªÉm tra k√Ω t·ª± ƒë·∫∑c bi·ªát
    if (/[^A-Za-z0-9]/.test(password)) {
      strength += 1;
    } else {
      feedback.push('N√™n th√™m k√Ω t·ª± ƒë·∫∑c bi·ªát');
    }
    
    // X√°c ƒë·ªãnh m·ª©c ƒë·ªô an to√†n
    let level = 'Y·∫øu';
    if (strength >= 5) {
      level = 'R·∫•t m·∫°nh';
    } else if (strength >= 4) {
      level = 'M·∫°nh';
    } else if (strength >= 3) {
      level = 'Trung b√¨nh';
    }
    
    return {
      level,
      score: strength,
      feedback: feedback
    };
  }

  /**
   * Ph√¢n t√≠ch s·ªë t√†i kho·∫£n ng√¢n h√†ng
   * @param {string} accountNumber - S·ªë t√†i kho·∫£n ng√¢n h√†ng c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async analyzeBankAccount(accountNumber) {
    try {
      console.log(`üè¶ Ph√¢n t√≠ch s·ªë t√†i kho·∫£n ng√¢n h√†ng: ${accountNumber}`);

      // Chu·∫©n h√≥a s·ªë t√†i kho·∫£n (b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát)
      const normalizedAccount = accountNumber.replace(/[^0-9]/g, '');
      
      try {
        // G·ªçi API t·ª´ Python ADK
        const response = await this.apiClient.post('/batcuclinh_so/bank_account', {
          account_number: normalizedAccount
        });
        
        if (response.data && response.status === 200) {
          console.log('‚úÖ Ph√¢n t√≠ch s·ªë t√†i kho·∫£n th√†nh c√¥ng t·ª´ Python ADK');
          return response.data;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK:', error.message);
        console.log('üîÑ S·ª≠ d·ª•ng ph√¢n t√≠ch d·ª± ph√≤ng');
        // Ti·∫øp t·ª•c v·ªõi ph√¢n t√≠ch d·ª± ph√≤ng
      }
      
      // Ph√¢n t√≠ch d·ª± ph√≤ng n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK
      return this._fallbackBankAccountAnalysis(normalizedAccount);
    } catch (error) {
      console.error('‚ùå L·ªói khi ph√¢n t√≠ch s·ªë t√†i kho·∫£n ng√¢n h√†ng:', error);
      throw new Error(`L·ªói ph√¢n t√≠ch: ${error.message}`);
    }
  }

  /**
   * T·∫°o g·ª£i √Ω s·ªë t√†i kho·∫£n ng√¢n h√†ng
   * @param {string} purpose - M·ª•c ƒë√≠ch c·ªßa t√†i kho·∫£n (business, personal, investment, saving)
   * @param {Array} preferredDigits - C√°c ch·ªØ s·ªë ∆∞a th√≠ch (kh√¥ng b·∫Øt bu·ªôc)
   * @returns {Object} C√°c g·ª£i √Ω s·ªë t√†i kho·∫£n
   */
  async suggestBankAccountNumbers(purpose, preferredDigits = []) {
    try {
      console.log(`üè¶ G·ª£i √Ω s·ªë t√†i kho·∫£n ng√¢n h√†ng cho m·ª•c ƒë√≠ch: ${purpose}`);
      
      try {
        // G·ªçi API t·ª´ Python ADK
        const response = await this.apiClient.post('/batcuclinh_so/suggest_bank_account', {
          purpose: purpose,
          preferred_digits: preferredDigits
        });
        
        if (response.data && response.status === 200) {
          console.log('‚úÖ G·ª£i √Ω s·ªë t√†i kho·∫£n th√†nh c√¥ng t·ª´ Python ADK');
          return response.data;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK:', error.message);
        console.log('üîÑ S·ª≠ d·ª•ng g·ª£i √Ω d·ª± ph√≤ng');
        // Ti·∫øp t·ª•c v·ªõi g·ª£i √Ω d·ª± ph√≤ng
      }
      
      // G·ª£i √Ω d·ª± ph√≤ng n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK
      return this._fallbackBankAccountSuggestion(purpose, preferredDigits);
    } catch (error) {
      console.error('‚ùå L·ªói khi g·ª£i √Ω s·ªë t√†i kho·∫£n ng√¢n h√†ng:', error);
      throw new Error(`L·ªói g·ª£i √Ω: ${error.message}`);
    }
  }

  /**
   * Ph√¢n t√≠ch d·ª± ph√≤ng cho s·ªë t√†i kho·∫£n ng√¢n h√†ng
   * @private
   * @param {string} accountNumber - S·ªë t√†i kho·∫£n ng√¢n h√†ng c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch d·ª± ph√≤ng
   */
  _fallbackBankAccountAnalysis(accountNumber) {
    // L·∫•y 4 s·ªë cu·ªëi c·ªßa t√†i kho·∫£n
    const lastFour = accountNumber.slice(-4);
    
    // T·∫°o c√°c c·∫∑p s·ªë t·ª´ 4 s·ªë cu·ªëi
    const pairs = [];
    if (lastFour.length >= 2) {
      pairs.push(lastFour.substring(0, 2));
      
      if (lastFour.length >= 3) {
        pairs.push(lastFour.substring(1, 3));
        
        if (lastFour.length >= 4) {
          pairs.push(lastFour.substring(2, 4));
        }
      }
    }
    
    // C·∫•u tr√∫c d·ªØ li·ªáu ph√¢n t√≠ch
    const analysisData = {
      pairsAnalysis: [],       // Ph√¢n t√≠ch t·ª´ng c·∫∑p s·ªë
      favorableFor: [],        // Thu·∫≠n l·ª£i cho m·ª•c ƒë√≠ch n√†o
      overallRating: 0,        // ƒê√°nh gi√° t·ªïng th·ªÉ (1-10)
      summary: ''              // T√≥m t·∫Øt t·ªïng quan
    };
    
    let totalEnergy = 0;
    let pairsCount = 0;
    
    // Ph√¢n t√≠ch t·ª´ng c·∫∑p s·ªë
    pairs.forEach((pair, index) => {
      const starInfo = this._getStarInfoForPair(pair);
      const pairAnalysis = {
        pairNumber: index + 1,
        digits: pair,
        starKey: starInfo.key,
        star: starInfo.name,
        meaning: starInfo.description,
        nature: starInfo.nature,
        energyLevel: starInfo.energy
      };
      
      analysisData.pairsAnalysis.push(pairAnalysis);
      
      // C·ªông d·ªìn nƒÉng l∆∞·ª£ng cho ƒë√°nh gi√° t·ªïng th·ªÉ
      if (starInfo.nature === 'C√°t tinh') {
        totalEnergy += starInfo.energy;
        pairsCount++;
        
        // X√°c ƒë·ªãnh m·ª•c ƒë√≠ch ph√π h·ª£p
        if (starInfo.key === 'THIEN_GIAI' || starInfo.key === 'THIEN_Y') {
          if (!analysisData.favorableFor.includes('health')) {
            analysisData.favorableFor.push('health');
          }
        }
        
        if (starInfo.key === 'THIEN_TAI' || starInfo.key === 'THIEN_Y') {
          if (!analysisData.favorableFor.includes('wealth')) {
            analysisData.favorableFor.push('wealth');
          }
        }
        
        if (starInfo.key === 'THIEN_MAN' || starInfo.key === 'THIEN_HAU') {
          if (!analysisData.favorableFor.includes('happiness')) {
            analysisData.favorableFor.push('happiness');
          }
        }
        
        if (starInfo.key === 'THIEN_LO' || starInfo.key === 'THIEN_TAI') {
          if (!analysisData.favorableFor.includes('business')) {
            analysisData.favorableFor.push('business');
          }
        }
      } else if (starInfo.nature === 'Hung tinh') {
        totalEnergy -= starInfo.energy;
        pairsCount++;
      }
    });
    
    // T√≠nh ƒë√°nh gi√° t·ªïng th·ªÉ
    if (pairsCount > 0) {
      const averageEnergy = totalEnergy / pairsCount;
      
      // Chuy·ªÉn ƒë·ªïi sang thang ƒëi·ªÉm 10
      analysisData.overallRating = Math.min(10, Math.max(1, Math.round(5 + averageEnergy)));
      
      // T·∫°o t√≥m t·∫Øt
      if (analysisData.overallRating >= 8) {
        analysisData.summary = 'S·ªë t√†i kho·∫£n ng√¢n h√†ng c√≥ nƒÉng l∆∞·ª£ng r·∫•t t·ªët. Ph√π h·ª£p cho m·ª•c ƒë√≠ch: ' + 
          (analysisData.favorableFor.length > 0 ? analysisData.favorableFor.join(', ') : 't√≠ch l≈©y t√†i ch√≠nh chung');
      } else if (analysisData.overallRating >= 5) {
        analysisData.summary = 'S·ªë t√†i kho·∫£n ng√¢n h√†ng c√≥ nƒÉng l∆∞·ª£ng trung b√¨nh.';
      } else {
        analysisData.summary = 'S·ªë t√†i kho·∫£n ng√¢n h√†ng c√≥ nƒÉng l∆∞·ª£ng kh√¥ng thu·∫≠n l·ª£i. N√™n c√¢n nh·∫Øc thay ƒë·ªïi.';
      }
    } else {
      analysisData.overallRating = 5;
      analysisData.summary = 'Kh√¥ng th·ªÉ ph√¢n t√≠ch s·ªë t√†i kho·∫£n do kh√¥ng c√≥ c·∫∑p s·ªë ph√π h·ª£p.';
    }
    
    return {
      success: true,
      accountNumber: accountNumber,
      lastFourDigits: lastFour,
      pairs: pairs,
      analysis: analysisData
    };
  }
  
  /**
   * G·ª£i √Ω d·ª± ph√≤ng cho s·ªë t√†i kho·∫£n ng√¢n h√†ng
   * @private
   * @param {string} purpose - M·ª•c ƒë√≠ch c·ªßa t√†i kho·∫£n
   * @param {Array} preferredDigits - C√°c ch·ªØ s·ªë ∆∞a th√≠ch
   * @returns {Object} K·∫øt qu·∫£ g·ª£i √Ω d·ª± ph√≤ng
   */
  _fallbackBankAccountSuggestion(purpose, preferredDigits = []) {
    console.log(`T·∫°o g·ª£i √Ω s·ªë t√†i kho·∫£n cho m·ª•c ƒë√≠ch: ${purpose}`);
    
    // X√°c ƒë·ªãnh c√°c sao ph√π h·ª£p v·ªõi m·ª•c ƒë√≠ch
    let targetStars = [];
    
    switch (purpose.toLowerCase()) {
      case 'business':
        // Th√≠ch h·ª£p cho kinh doanh
        targetStars = ['THIEN_LO', 'THIEN_TAI', 'THIEN_HOA'];
        break;
      case 'investment':
        // Th√≠ch h·ª£p cho ƒë·∫ßu t∆∞
        targetStars = ['THIEN_TAI', 'THIEN_PHUC', 'THIEN_LINH'];
        break;
      case 'saving':
        // Th√≠ch h·ª£p cho ti·∫øt ki·ªám
        targetStars = ['THIEN_TAI', 'THIEN_THU', 'THIEN_NGUYET'];
        break;
      case 'health':
        // Th√≠ch h·ª£p cho s·ª©c kh·ªèe
        targetStars = ['THIEN_Y', 'THIEN_GIAI', 'THIEN_NGUYET'];
        break;
      default:
        // Personal - chung chung
        targetStars = ['THIEN_TAI', 'THIEN_Y', 'THIEN_MAN'];
        break;
    }
    
    // L·∫•y c√°c c·∫∑p s·ªë t∆∞∆°ng ·ª©ng v·ªõi c√°c sao m·ª•c ti√™u
    const suitablePairs = this._getSuitableDigitPairs(targetStars, preferredDigits);
    
    // T·∫°o ƒë·ªÅ xu·∫•t
    const recommendations = [];
    
    // T·∫°o c√°c t·ªï h·ª£p c·∫∑p s·ªë cu·ªëi t·ª´ hai c·∫∑p s·ªë
    for (let i = 0; i < Math.min(suitablePairs.length, 10); i++) {
      const firstPair = suitablePairs[i];
      
      for (let j = 0; j < Math.min(suitablePairs.length, 10); j++) {
        if (i !== j) {
          const secondPair = suitablePairs[j];
          
          // K·∫øt h·ª£p ƒë·ªÉ t·∫°o 4 s·ªë cu·ªëi
          if (secondPair.digits[0] === firstPair.digits[1]) {
            // N·∫øu ch·ªØ s·ªë ƒë·∫ßu c·ªßa c·∫∑p th·ª© hai tr√πng v·ªõi ch·ªØ s·ªë cu·ªëi c·ªßa c·∫∑p ƒë·∫ßu ti√™n
            // th√¨ t·∫°o th√†nh m·ªôt d√£y 3 s·ªë li√™n t·ª•c
            const lastFour = firstPair.digits + secondPair.digits[1];
            
            recommendations.push({
              lastFourDigits: lastFour,
              stars: `${firstPair.star} + ${secondPair.star}`,
              energyLevel: (firstPair.energyLevel + secondPair.energyLevel) / 2,
              description: `K·∫øt h·ª£p ${firstPair.star} (${firstPair.digits}) v√† ${secondPair.star} (${secondPair.digits})`
            });
          }
          
          // N·∫øu ƒë√£ ƒë·ªß 5 ƒë·ªÅ xu·∫•t th√¨ d·ª´ng
          if (recommendations.length >= 5) {
            break;
          }
        }
      }
      
      // N·∫øu ƒë√£ ƒë·ªß 5 ƒë·ªÅ xu·∫•t th√¨ d·ª´ng
      if (recommendations.length >= 5) {
        break;
      }
    }
    
    // N·∫øu ch∆∞a ƒë·ªß ƒë·ªÅ xu·∫•t, th√™m c√°c c·∫∑p ri√™ng l·∫ª
    if (recommendations.length < 5) {
      for (let i = 0; i < Math.min(suitablePairs.length, 5 - recommendations.length); i++) {
        const pair = suitablePairs[i];
        
        // T·∫°o s·ªë cu·ªëi b·∫±ng c√°ch l·∫∑p l·∫°i c·∫∑p s·ªë
        recommendations.push({
          lastFourDigits: pair.digits + pair.digits,
          stars: `${pair.star} (k√©p)`,
          energyLevel: pair.energyLevel,
          description: `${pair.star} (${pair.digits}) l·∫∑p l·∫°i ƒë·ªÉ tƒÉng c∆∞·ªùng nƒÉng l∆∞·ª£ng`
        });
      }
    }
    
    // S·∫Øp x·∫øp theo m·ª©c nƒÉng l∆∞·ª£ng
    recommendations.sort((a, b) => b.energyLevel - a.energyLevel);
    
    return {
      success: true,
      purpose: purpose,
      preferredDigits: preferredDigits,
      recommendations: recommendations,
      note: 'ƒê√¢y l√† ƒë·ªÅ xu·∫•t d·ª± ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i khi Python ADK s·∫µn s√†ng ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c h∆°n.'
    };
  }
  
  /**
   * L·∫•y c√°c c·∫∑p s·ªë ph√π h·ª£p v·ªõi c√°c sao ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
   * @private
   * @param {Array} targetStars - C√°c sao m·ª•c ti√™u
   * @param {Array} preferredDigits - C√°c ch·ªØ s·ªë ∆∞a th√≠ch (kh√¥ng b·∫Øt bu·ªôc)
   * @returns {Array} M·∫£ng c√°c c·∫∑p s·ªë ph√π h·ª£p v√† th√¥ng tin c·ªßa ch√∫ng
   */
  _getSuitableDigitPairs(targetStars, preferredDigits = []) {
    // Require t·∫°i ƒë√¢y ƒë·ªÉ tr√°nh circular dependency
    const BAT_TINH = require('../../../constants/batTinh');
    
    const result = [];
    
    // Duy·ªát qua c√°c sao m·ª•c ti√™u
    for (const starKey of targetStars) {
      if (BAT_TINH[starKey]) {
        const starData = BAT_TINH[starKey];
        
        // Duy·ªát qua c√°c c·∫∑p s·ªë c·ªßa sao n√†y
        if (starData.numbers && Array.isArray(starData.numbers)) {
          for (const pair of starData.numbers) {
            // Ki·ªÉm tra n·∫øu c·∫∑p s·ªë ch·ª©a c√°c ch·ªØ s·ªë ∆∞a th√≠ch
            const containsPreferred = preferredDigits.length === 0 ||
              preferredDigits.some(d => pair.includes(d));
            
            if (containsPreferred) {
              result.push({
                digits: pair,
                star: starData.name,
                starKey: starKey,
                nature: starData.nature,
                energyLevel: starData.energy[pair] || 3
              });
            }
          }
        }
      }
    }
    
    // S·∫Øp x·∫øp theo m·ª©c nƒÉng l∆∞·ª£ng
    result.sort((a, b) => b.energyLevel - a.energyLevel);
    
    return result;
  }
}

module.exports = new BatCucLinhSoService(); 