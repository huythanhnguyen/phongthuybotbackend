const axios = require('axios');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

// C·∫•u h√¨nh k·∫øt n·ªëi ƒë·∫øn Python ADK
const PYTHON_ADK_URL = process.env.PYTHON_ADK_URL || 'http://localhost:8000';
const API_KEY = process.env.ADK_API_KEY || 'dev_key';

/**
 * Service ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i, CCCD theo ph∆∞∆°ng ph√°p B√°t C·ª•c Linh S·ªë
 */
class BatCucLinhSoService {
  /**
   * Kh·ªüi t·∫°o d·ªãch v·ª•
   */
  constructor() {
    console.log('üî¢ Kh·ªüi t·∫°o B√°t C·ª•c Linh S·ªë Service');
    this.apiClient = axios.create({
      baseURL: `${PYTHON_ADK_URL}/api`,
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
      }
    });
  }

  /**
   * Ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i
   * @param {string} phoneNumber - S·ªë ƒëi·ªán tho·∫°i c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async analyzePhoneNumber(phoneNumber) {
    try {
      console.log(`üìû Ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i: ${phoneNumber}`);

      // Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i (b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát)
      const normalizedPhone = phoneNumber.replace(/[^0-9+]/g, '');
      
      try {
        // G·ªçi API t·ª´ Python ADK
        const response = await this.apiClient.post('/batcuclinh_so/phone', {
          phone_number: normalizedPhone
        });
        
        if (response.data && response.status === 200) {
          console.log('‚úÖ Ph√¢n t√≠ch th√†nh c√¥ng t·ª´ Python ADK');
          return response.data;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK:', error.message);
        console.log('üîÑ S·ª≠ d·ª•ng ph√¢n t√≠ch d·ª± ph√≤ng');
        // Ti·∫øp t·ª•c v·ªõi ph√¢n t√≠ch d·ª± ph√≤ng
      }
      
      // Ph√¢n t√≠ch d·ª± ph√≤ng n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK
      return this._fallbackPhoneAnalysis(normalizedPhone);
    } catch (error) {
      console.error('‚ùå L·ªói khi ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i:', error);
      throw new Error(`L·ªói ph√¢n t√≠ch: ${error.message}`);
    }
  }

  /**
   * Ph√¢n t√≠ch CCCD/CMND
   * @param {string} cccdNumber - S·ªë CCCD/CMND c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async analyzeCCCD(cccdNumber) {
    try {
      console.log(`ü™™ Ph√¢n t√≠ch CCCD/CMND: ${cccdNumber}`);

      // Chu·∫©n h√≥a s·ªë CCCD (b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát)
      const normalizedCCCD = cccdNumber.replace(/[^0-9]/g, '');
      
      try {
        // G·ªçi API t·ª´ Python ADK
        const response = await this.apiClient.post('/batcuclinh_so/cccd', {
          cccd_number: normalizedCCCD
        });
        
        if (response.data && response.status === 200) {
          console.log('‚úÖ Ph√¢n t√≠ch CCCD th√†nh c√¥ng t·ª´ Python ADK');
          return response.data;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK:', error.message);
        console.log('üîÑ S·ª≠ d·ª•ng ph√¢n t√≠ch CCCD d·ª± ph√≤ng');
        // Ti·∫øp t·ª•c v·ªõi ph√¢n t√≠ch d·ª± ph√≤ng
      }
      
      // Ph√¢n t√≠ch d·ª± ph√≤ng n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK
      return this._fallbackCCCDAnalysis(normalizedCCCD);
    } catch (error) {
      console.error('‚ùå L·ªói khi ph√¢n t√≠ch CCCD/CMND:', error);
      throw new Error(`L·ªói ph√¢n t√≠ch: ${error.message}`);
    }
  }

  /**
   * Ph√¢n t√≠ch th√¥ng tin chung
   * @param {string} data - D·ªØ li·ªáu c·∫ßn ph√¢n t√≠ch
   * @param {string} type - Lo·∫°i ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async analyze(data, type) {
    switch (type) {
      case 'phone':
        return await this.analyzePhoneNumber(data);
      case 'cccd':
        return await this.analyzeCCCD(data);
      default:
        throw new Error(`Lo·∫°i ph√¢n t√≠ch kh√¥ng h·ªó tr·ª£: ${type}`);
    }
  }

  /**
   * Ph√¢n t√≠ch d·ª± ph√≤ng cho s·ªë ƒëi·ªán tho·∫°i
   * @private
   * @param {string} phoneNumber - S·ªë ƒëi·ªán tho·∫°i c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch d·ª± ph√≤ng
   */
  _fallbackPhoneAnalysis(phoneNumber) {
    // T√≠nh t·ªïng c√°c ch·ªØ s·ªë
    const sum = [...phoneNumber].reduce((total, digit) => {
      return total + (isNaN(parseInt(digit)) ? 0 : parseInt(digit));
    }, 0);
    
    // R√∫t g·ªçn th√†nh s·ªë c√≥ 1 ch·ªØ s·ªë
    let reducedSum = sum;
    while (reducedSum > 9) {
      reducedSum = [...reducedSum.toString()].reduce((total, digit) => {
        return total + parseInt(digit);
      }, 0);
    }
    
    // X√°c ƒë·ªãnh ng≈© h√†nh
    const element = this._getElement(reducedSum);
    
    // Ph√¢n t√≠ch c∆° b·∫£n
    const analysis = `
    Ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i: ${phoneNumber}
    
    T·ªïng gi√° tr·ªã: ${sum} (R√∫t g·ªçn: ${reducedSum})
    Ng≈© h√†nh: ${element}
    
    ƒê√¢y l√† k·∫øt qu·∫£ ph√¢n t√≠ch d·ª± ph√≤ng khi kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK.
    Vui l√≤ng th·ª≠ l·∫°i sau khi h·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông ƒë·∫ßy ƒë·ªß.
    `;
    
    return {
      success: true,
      phoneNumber,
      totalValue: reducedSum,
      element,
      analysis
    };
  }
  
  /**
   * Ph√¢n t√≠ch d·ª± ph√≤ng cho CCCD/CMND
   * @private
   * @param {string} cccdNumber - S·ªë CCCD/CMND c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch d·ª± ph√≤ng
   */
  _fallbackCCCDAnalysis(cccdNumber) {
    // T√≠nh t·ªïng c√°c ch·ªØ s·ªë
    const sum = [...cccdNumber].reduce((total, digit) => {
      return total + parseInt(digit);
    }, 0);
    
    // R√∫t g·ªçn th√†nh s·ªë c√≥ 1 ch·ªØ s·ªë
    let reducedSum = sum;
    while (reducedSum > 9) {
      reducedSum = [...reducedSum.toString()].reduce((total, digit) => {
        return total + parseInt(digit);
      }, 0);
    }
    
    // X√°c ƒë·ªãnh ng≈© h√†nh
    const element = this._getElement(reducedSum);
    
    // Ph√¢n t√≠ch c∆° b·∫£n
    let info = {};
    
    // Tr√≠ch xu·∫•t th√¥ng tin t·ª´ CCCD 12 s·ªë
    if (cccdNumber.length === 12) {
      const provinceCode = cccdNumber.substring(0, 3);
      const genderCode = parseInt(cccdNumber[3]);
      const birthYear = cccdNumber.substring(4, 6);
      
      // Mapping gi·ªõi t√≠nh v√† th·∫ø k·ª∑
      let gender = "Kh√¥ng x√°c ƒë·ªãnh";
      let century = "xx";
      
      if (genderCode === 0 || genderCode === 2 || genderCode === 4 || genderCode === 6 || genderCode === 8) {
        gender = "Nam";
      } else if (genderCode === 1 || genderCode === 3 || genderCode === 5 || genderCode === 7 || genderCode === 9) {
        gender = "N·ªØ";
      }
      
      if (genderCode === 0 || genderCode === 1) {
        century = "19";
      } else if (genderCode === 2 || genderCode === 3) {
        century = "20";
      } else if (genderCode === 4 || genderCode === 5) {
        century = "21";
      }
      
      info = {
        type: "CCCD",
        provinceCode,
        gender,
        birthYear: `${century}${birthYear}`,
        randomCode: cccdNumber.substring(6)
      };
    } else if (cccdNumber.length === 9) {
      info = {
        type: "CMND",
        note: "CMND 9 s·ªë kh√¥ng c√≥ c·∫•u tr√∫c c·ªë ƒë·ªãnh ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin chi ti·∫øt"
      };
    }
    
    const analysis = `
    Ph√¢n t√≠ch s·ªë ${info.type || "CCCD/CMND"}: ${cccdNumber}
    
    T·ªïng gi√° tr·ªã: ${sum} (R√∫t g·ªçn: ${reducedSum})
    Ng≈© h√†nh: ${element}
    
    ${info.type === "CCCD" ? `
    Th√¥ng tin c√° nh√¢n:
    - M√£ t·ªânh: ${info.provinceCode}
    - Gi·ªõi t√≠nh: ${info.gender}
    - NƒÉm sinh: ${info.birthYear}
    - M√£ ng·∫´u nhi√™n: ${info.randomCode}
    ` : ''}
    
    ƒê√¢y l√† k·∫øt qu·∫£ ph√¢n t√≠ch d·ª± ph√≤ng khi kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Python ADK.
    Vui l√≤ng th·ª≠ l·∫°i sau khi h·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông ƒë·∫ßy ƒë·ªß.
    `;
    
    return {
      success: true,
      cccdNumber,
      totalValue: reducedSum,
      element,
      info,
      analysis
    };
  }
  
  /**
   * X√°c ƒë·ªãnh ng≈© h√†nh t·ª´ s·ªë
   * @private
   * @param {number} number - S·ªë c·∫ßn x√°c ƒë·ªãnh ng≈© h√†nh
   * @returns {string} Ng≈© h√†nh t∆∞∆°ng ·ª©ng
   */
  _getElement(number) {
    const elements = {
      1: "Th·ªßy",
      2: "Th·ªï",
      3: "M·ªôc",
      4: "Kim",
      5: "Th·ªï",
      6: "Kim",
      7: "Kim",
      8: "Th·ªï",
      9: "H·ªèa",
      0: "Th·ªßy"
    };
    
    return elements[number] || "Kh√¥ng x√°c ƒë·ªãnh";
  }
}

module.exports = new BatCucLinhSoService(); 