const axios = require('axios');
const dotenv = require('dotenv');
const fs = require('fs');
const path = require('path');

// Load environment variables
dotenv.config();

// C·∫•u h√¨nh k·∫øt n·ªëi ƒë·∫øn Python ADK
const PROD_ADK_URL = 'https://phongthuybotadk.onrender.com';
const DEV_ADK_URL = process.env.PYTHON_ADK_URL || 'http://localhost:8000';
const API_KEY = process.env.ADK_API_KEY || 'dev_key';
const NODE_ENV = process.env.NODE_ENV || 'development';

/**
 * Service ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i, CCCD theo ph∆∞∆°ng ph√°p B√°t C·ª•c Linh S·ªë
 */
class BatCucLinhSoService {
  /**
   * Kh·ªüi t·∫°o d·ªãch v·ª•
   */
  constructor() {
    console.log('üî¢ Kh·ªüi t·∫°o B√°t C·ª•c Linh S·ªë Service');
    const baseURL = NODE_ENV === 'production' ? PROD_ADK_URL : DEV_ADK_URL;
    console.log(`üîó K·∫øt n·ªëi ƒë·∫øn Python ADK: ${baseURL}`);
    
    // Kh·ªüi t·∫°o logger
    this.setupLogger();
    
    this.apiClient = axios.create({
      baseURL: baseURL,
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
      },
      timeout: 10000, // 10 second timeout
      maxRedirects: 3,
      retry: 2, // Th·ª≠ l·∫°i 2 l·∫ßn n·∫øu g·∫∑p l·ªói
      retryDelay: 1000 // Ch·ªù 1 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
    });
    
    // Th√™m interceptor ƒë·ªÉ t·ª± ƒë·ªông th·ª≠ l·∫°i khi g·∫∑p l·ªói
    this.apiClient.interceptors.response.use(undefined, async (err) => {
      const { config } = err;
      if (!config || !config.retry) {
        return Promise.reject(err);
      }
      
      // Gi·∫£m s·ªë l·∫ßn retry c√≤n l·∫°i
      config.retry -= 1;
      
      if (config.retry === 0) {
        return Promise.reject(err);
      }
      
      // T·∫°o promise delay
      const delayRetry = new Promise(resolve => {
        setTimeout(resolve, config.retryDelay || 1000);
      });
      
      // Th·ª≠ l·∫°i sau khi delay
      await delayRetry;
      console.log('üîÑ ƒêang th·ª≠ l·∫°i k·∫øt n·ªëi ƒë·∫øn Python ADK...');
      this.log('info', `ƒêang th·ª≠ l·∫°i k·∫øt n·ªëi ƒë·∫øn Python ADK: ${config.url}`);
      return this.apiClient(config);
    });
  }
  
  /**
   * Thi·∫øt l·∫≠p logger
   */
  setupLogger() {
    try {
      const logDir = path.join(__dirname, '../../../logs');
      if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir, { recursive: true });
      }
      this.logPath = path.join(logDir, 'adk-connection.log');
      this.log('info', 'üî¢ Kh·ªüi t·∫°o B√°t C·ª•c Linh S·ªë Service');
    } catch (error) {
      console.error('‚ùå Kh√¥ng th·ªÉ thi·∫øt l·∫≠p logger:', error);
    }
  }
  
  /**
   * Ghi log
   * @param {string} level - C·∫•p ƒë·ªô log (info, warn, error)
   * @param {string} message - Th√¥ng b√°o log
   */
  log(level, message) {
    if (!this.logPath) return;
    
    try {
      const timestamp = new Date().toISOString();
      const logEntry = `[${timestamp}] [${level.toUpperCase()}] ${message}\n`;
      fs.appendFileSync(this.logPath, logEntry);
    } catch (error) {
      console.error('‚ùå L·ªói khi ghi log:', error);
    }
  }

  /**
   * Ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i
   * @param {string} phoneNumber - S·ªë ƒëi·ªán tho·∫°i c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async analyzePhoneNumber(phoneNumber) {
    try {
      console.log(`üìû Ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i: ${phoneNumber}`);

      // Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i (b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát)
      const normalizedPhone = phoneNumber.replace(/[^0-9+]/g, '');
      
      // G·ªçi API t·ª´ Python ADK
      const response = await this.apiClient.post('/analyze/phone', {
        phone_number: normalizedPhone
      });
      
      if (response.data && response.status === 200) {
        console.log('‚úÖ Ph√¢n t√≠ch th√†nh c√¥ng t·ª´ Python ADK');
        return response.data;
      }
      
      throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Python ADK');
    } catch (error) {
      console.error('‚ùå L·ªói khi ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i:', error);
      throw new Error(`L·ªói ph√¢n t√≠ch: ${error.message}`);
    }
  }

  /**
   * Ph√¢n t√≠ch CCCD/CMND
   * @param {string} cccdNumber - S·ªë CCCD/CMND c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async analyzeCCCD(cccdNumber) {
    try {
      console.log(`ü™™ Ph√¢n t√≠ch CCCD/CMND: ${cccdNumber}`);

      // Chu·∫©n h√≥a s·ªë CCCD (b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát)
      const normalizedCCCD = cccdNumber.replace(/[^0-9]/g, '');
      
      // G·ªçi API t·ª´ Python ADK
      const response = await this.apiClient.post('/analyze/cccd', {
        cccd_number: normalizedCCCD
      });
      
      if (response.data && response.status === 200) {
        console.log('‚úÖ Ph√¢n t√≠ch CCCD th√†nh c√¥ng t·ª´ Python ADK');
        return response.data;
      }
      
      throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Python ADK');
    } catch (error) {
      console.error('‚ùå L·ªói khi ph√¢n t√≠ch CCCD/CMND:', error);
      throw new Error(`L·ªói ph√¢n t√≠ch: ${error.message}`);
    }
  }

  /**
   * Ph√¢n t√≠ch th√¥ng tin chung
   * @param {string} data - D·ªØ li·ªáu c·∫ßn ph√¢n t√≠ch
   * @param {string} type - Lo·∫°i ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async analyze(data, type) {
    switch (type) {
      case 'phone':
        return await this.analyzePhoneNumber(data);
      case 'cccd':
        return await this.analyzeCCCD(data);
      case 'password':
        return await this.analyzePassword(data);
      case 'bank_account':
        return await this.analyzeBankAccount(data);
      default:
        throw new Error(`Lo·∫°i ph√¢n t√≠ch kh√¥ng h·ªó tr·ª£: ${type}`);
    }
  }

  /**
   * Ph√¢n t√≠ch m·∫≠t kh·∫©u theo phong th·ªßy
   * @param {string} password - M·∫≠t kh·∫©u c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch m·∫≠t kh·∫©u theo phong th·ªßy
   */
  async analyzePassword(password) {
    try {
      console.log(`üîê Ph√¢n t√≠ch m·∫≠t kh·∫©u theo phong th·ªßy`);
      
      // G·ªçi API t·ª´ Python ADK
      const response = await this.apiClient.post('/analyze/password', {
        password: password
      });
      
      if (response.data && response.status === 200) {
        console.log('‚úÖ Ph√¢n t√≠ch m·∫≠t kh·∫©u th√†nh c√¥ng t·ª´ Python ADK');
        return response.data;
      }
      
      throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Python ADK');
    } catch (error) {
      console.error('‚ùå L·ªói khi ph√¢n t√≠ch m·∫≠t kh·∫©u:', error);
      throw new Error(`L·ªói ph√¢n t√≠ch: ${error.message}`);
    }
  }

  /**
   * Ph√¢n t√≠ch s·ªë t√†i kho·∫£n ng√¢n h√†ng
   * @param {string} accountNumber - S·ªë t√†i kho·∫£n ng√¢n h√†ng c·∫ßn ph√¢n t√≠ch
   * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async analyzeBankAccount(accountNumber) {
    try {
      console.log(`üè¶ Ph√¢n t√≠ch s·ªë t√†i kho·∫£n ng√¢n h√†ng: ${accountNumber}`);

      // Chu·∫©n h√≥a s·ªë t√†i kho·∫£n (b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát)
      const normalizedAccount = accountNumber.replace(/[^0-9]/g, '');
      
      // G·ªçi API t·ª´ Python ADK
      const response = await this.apiClient.post('/analyze/bank-account', {
        account_number: normalizedAccount
      });
      
      if (response.data && response.status === 200) {
        console.log('‚úÖ Ph√¢n t√≠ch s·ªë t√†i kho·∫£n th√†nh c√¥ng t·ª´ Python ADK');
        return response.data;
      }
      
      throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Python ADK');
    } catch (error) {
      console.error('‚ùå L·ªói khi ph√¢n t√≠ch s·ªë t√†i kho·∫£n ng√¢n h√†ng:', error);
      throw new Error(`L·ªói ph√¢n t√≠ch: ${error.message}`);
    }
  }

  /**
   * T·∫°o g·ª£i √Ω s·ªë t√†i kho·∫£n ng√¢n h√†ng
   * @param {string} purpose - M·ª•c ƒë√≠ch c·ªßa t√†i kho·∫£n (business, personal, investment, saving)
   * @param {Array} preferredDigits - C√°c ch·ªØ s·ªë ∆∞a th√≠ch (kh√¥ng b·∫Øt bu·ªôc)
   * @returns {Object} C√°c g·ª£i √Ω s·ªë t√†i kho·∫£n
   */
  async suggestBankAccountNumbers(purpose, preferredDigits = []) {
    try {
      console.log(`üè¶ G·ª£i √Ω s·ªë t√†i kho·∫£n ng√¢n h√†ng cho m·ª•c ƒë√≠ch: ${purpose}`);
      
      // G·ªçi API t·ª´ Python ADK
      const response = await this.apiClient.post('/suggest/bank-account', {
        purpose: purpose,
        preferred_digits: preferredDigits
      });
      
      if (response.data && response.status === 200) {
        console.log('‚úÖ G·ª£i √Ω s·ªë t√†i kho·∫£n th√†nh c√¥ng t·ª´ Python ADK');
        return response.data;
      }
      
      throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Python ADK');
    } catch (error) {
      console.error('‚ùå L·ªói khi g·ª£i √Ω s·ªë t√†i kho·∫£n ng√¢n h√†ng:', error);
      throw new Error(`L·ªói g·ª£i √Ω: ${error.message}`);
    }
  }
}

module.exports = new BatCucLinhSoService(); 